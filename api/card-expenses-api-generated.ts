/* tslint:disable */
/* eslint-disable */
/*
Expenses API


The Expenses API allows you to manage accounting and expenses information.


The version of the OpenAPI document: 0.1
Contact: developer-access@brex.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExpandableExpense } from '../models';
// @ts-ignore
import { Expense } from '../models';
// @ts-ignore
import { ExpensePaymentStatus } from '../models';
// @ts-ignore
import { ExpenseStatus } from '../models';
// @ts-ignore
import { PageExpandableExpense } from '../models';
// @ts-ignore
import { UpdateExpenseRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CardExpensesApi - axios parameter creator
 * @export
 */
export const CardExpensesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an expense by its ID.
         * @summary Get an expense
         * @param {string} expenseId 
         * @param {Array<string>} [expand] Get additional details for the expense, e.g. merchant mcc code, by passing in &#x60;expand[]&#x3D;merchant&#x60;. Query parameters include &#x60;location&#x60;, &#x60;department&#x60;, &#x60;merchant&#x60;, &#x60;receipts.download_uris&#x60;, &#x60;user&#x60;, &#x60;budget&#x60; and &#x60;payment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (expenseId: string, expand?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('getById', 'expenseId', expenseId)
            const localVarPath = `/v1/expenses/card/{expense_id}`
                .replace(`{${"expense_id"}}`, encodeURIComponent(String(expenseId !== undefined ? expenseId : `-expense_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["expenses.card.readonly", "expenses.card"], configuration)
            if (expand) {
                localVarQueryParameter['expand[]'] = expand;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/card/{expense_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List expenses under the same account. Admin and bookkeeper have access to any expense, and regular users can only access their own.
         * @summary List expenses
         * @param {Array<string>} [expand] Get additional details for the expense, e.g. merchant mcc code, by passing in &#x60;expand[]&#x3D;merchant&#x60;. Query parameters include &#x60;location&#x60;, &#x60;department&#x60;, &#x60;merchant&#x60;, &#x60;receipts.download_uris&#x60;, &#x60;user&#x60;, &#x60;budget&#x60; and &#x60;payment&#x60;.
         * @param {Array<string>} [userId] Get expenses belong to provided user(s).
         * @param {Array<string>} [parentExpenseId] Get itemized expenses belong to provided parent expenses ID(s).
         * @param {Array<string>} [budgetId] 
         * @param {Array<ExpenseStatus>} [status] 
         * @param {Array<ExpensePaymentStatus>} [paymentStatus] 
         * @param {string} [purchasedAtStart]  Shows only expenses with a &#x60;purchased_at&#x60; on or after this date-time. This parameter is the date-time notation as defined by [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6), e.g. 2022-11-12T23:59:59.999 
         * @param {string} [purchasedAtEnd]  Shows only expenses with a &#x60;purchased_at&#x60; on or before this date-time. This parameter is the date-time notation as defined by [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6), e.g. 2022-11-12T23:59:59.999 
         * @param {string} [cursor]  The cursor to use for pagination. This is the &#x60;next_cursor&#x60; value returned from the previous response. 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (expand?: Array<string>, userId?: Array<string>, parentExpenseId?: Array<string>, budgetId?: Array<string>, status?: Array<ExpenseStatus>, paymentStatus?: Array<ExpensePaymentStatus>, purchasedAtStart?: string, purchasedAtEnd?: string, cursor?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/expenses/card`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["expenses.card.readonly", "expenses.card"], configuration)
            if (expand) {
                localVarQueryParameter['expand[]'] = expand;
            }

            if (userId) {
                localVarQueryParameter['user_id[]'] = userId;
            }

            if (parentExpenseId) {
                localVarQueryParameter['parent_expense_id[]'] = parentExpenseId;
            }

            if (budgetId) {
                localVarQueryParameter['budget_id[]'] = budgetId;
            }

            if (status) {
                localVarQueryParameter['status[]'] = status;
            }

            if (paymentStatus) {
                localVarQueryParameter['payment_status[]'] = paymentStatus;
            }

            if (purchasedAtStart !== undefined) {
                localVarQueryParameter['purchased_at_start'] = (purchasedAtStart as any instanceof Date) ?
                    (purchasedAtStart as any).toISOString() :
                    purchasedAtStart;
            }

            if (purchasedAtEnd !== undefined) {
                localVarQueryParameter['purchased_at_end'] = (purchasedAtEnd as any instanceof Date) ?
                    (purchasedAtEnd as any).toISOString() :
                    purchasedAtEnd;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/card',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an expense. Admin and bookkeeper have access to any expense, and regular users can only access their own.
         * @summary Update an expense
         * @param {string} expenseId 
         * @param {UpdateExpenseRequest} updateExpenseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpense: async (expenseId: string, updateExpenseRequest: UpdateExpenseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('updateExpense', 'expenseId', expenseId)
            // verify required parameter 'updateExpenseRequest' is not null or undefined
            assertParamExists('updateExpense', 'updateExpenseRequest', updateExpenseRequest)
            const localVarPath = `/v1/expenses/card/{expense_id}`
                .replace(`{${"expense_id"}}`, encodeURIComponent(String(expenseId !== undefined ? expenseId : `-expense_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2", ["expenses.card"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateExpenseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/card/{expense_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateExpenseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardExpensesApi - functional programming interface
 * @export
 */
export const CardExpensesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardExpensesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get an expense by its ID.
         * @summary Get an expense
         * @param {CardExpensesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CardExpensesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpandableExpense>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.expenseId, requestParameters.expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List expenses under the same account. Admin and bookkeeper have access to any expense, and regular users can only access their own.
         * @summary List expenses
         * @param {CardExpensesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: CardExpensesApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageExpandableExpense>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.expand, requestParameters.userId, requestParameters.parentExpenseId, requestParameters.budgetId, requestParameters.status, requestParameters.paymentStatus, requestParameters.purchasedAtStart, requestParameters.purchasedAtEnd, requestParameters.cursor, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an expense. Admin and bookkeeper have access to any expense, and regular users can only access their own.
         * @summary Update an expense
         * @param {CardExpensesApiUpdateExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExpense(requestParameters: CardExpensesApiUpdateExpenseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Expense>> {
            const updateExpenseRequest: UpdateExpenseRequest = {
                memo: requestParameters.memo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExpense(requestParameters.expenseId, updateExpenseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardExpensesApi - factory interface
 * @export
 */
export const CardExpensesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardExpensesApiFp(configuration)
    return {
        /**
         * Get an expense by its ID.
         * @summary Get an expense
         * @param {CardExpensesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CardExpensesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ExpandableExpense> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List expenses under the same account. Admin and bookkeeper have access to any expense, and regular users can only access their own.
         * @summary List expenses
         * @param {CardExpensesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: CardExpensesApiListRequest, options?: AxiosRequestConfig): AxiosPromise<PageExpandableExpense> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an expense. Admin and bookkeeper have access to any expense, and regular users can only access their own.
         * @summary Update an expense
         * @param {CardExpensesApiUpdateExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpense(requestParameters: CardExpensesApiUpdateExpenseRequest, options?: AxiosRequestConfig): AxiosPromise<Expense> {
            return localVarFp.updateExpense(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in CardExpensesApi.
 * @export
 * @interface CardExpensesApiGetByIdRequest
 */
export type CardExpensesApiGetByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardExpensesApiGetById
    */
    readonly expenseId: string
    
    /**
    * Get additional details for the expense, e.g. merchant mcc code, by passing in `expand[]=merchant`. Query parameters include `location`, `department`, `merchant`, `receipts.download_uris`, `user`, `budget` and `payment`.
    * @type {Array<string>}
    * @memberof CardExpensesApiGetById
    */
    readonly expand?: Array<string>
    
}

/**
 * Request parameters for list operation in CardExpensesApi.
 * @export
 * @interface CardExpensesApiListRequest
 */
export type CardExpensesApiListRequest = {
    
    /**
    * Get additional details for the expense, e.g. merchant mcc code, by passing in `expand[]=merchant`. Query parameters include `location`, `department`, `merchant`, `receipts.download_uris`, `user`, `budget` and `payment`.
    * @type {Array<string>}
    * @memberof CardExpensesApiList
    */
    readonly expand?: Array<string>
    
    /**
    * Get expenses belong to provided user(s).
    * @type {Array<string>}
    * @memberof CardExpensesApiList
    */
    readonly userId?: Array<string>
    
    /**
    * Get itemized expenses belong to provided parent expenses ID(s).
    * @type {Array<string>}
    * @memberof CardExpensesApiList
    */
    readonly parentExpenseId?: Array<string>
    
    /**
    * 
    * @type {Array<string>}
    * @memberof CardExpensesApiList
    */
    readonly budgetId?: Array<string>
    
    /**
    * 
    * @type {Array<ExpenseStatus>}
    * @memberof CardExpensesApiList
    */
    readonly status?: Array<ExpenseStatus>
    
    /**
    * 
    * @type {Array<ExpensePaymentStatus>}
    * @memberof CardExpensesApiList
    */
    readonly paymentStatus?: Array<ExpensePaymentStatus>
    
    /**
    *  Shows only expenses with a `purchased_at` on or after this date-time. This parameter is the date-time notation as defined by [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6), e.g. 2022-11-12T23:59:59.999 
    * @type {string}
    * @memberof CardExpensesApiList
    */
    readonly purchasedAtStart?: string
    
    /**
    *  Shows only expenses with a `purchased_at` on or before this date-time. This parameter is the date-time notation as defined by [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6), e.g. 2022-11-12T23:59:59.999 
    * @type {string}
    * @memberof CardExpensesApiList
    */
    readonly purchasedAtEnd?: string
    
    /**
    *  The cursor to use for pagination. This is the `next_cursor` value returned from the previous response. 
    * @type {string}
    * @memberof CardExpensesApiList
    */
    readonly cursor?: string
    
    /**
    * 
    * @type {number}
    * @memberof CardExpensesApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateExpense operation in CardExpensesApi.
 * @export
 * @interface CardExpensesApiUpdateExpenseRequest
 */
export type CardExpensesApiUpdateExpenseRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CardExpensesApiUpdateExpense
    */
    readonly expenseId: string
    
} & UpdateExpenseRequest

/**
 * CardExpensesApiGenerated - object-oriented interface
 * @export
 * @class CardExpensesApiGenerated
 * @extends {BaseAPI}
 */
export class CardExpensesApiGenerated extends BaseAPI {
    /**
     * Get an expense by its ID.
     * @summary Get an expense
     * @param {CardExpensesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardExpensesApiGenerated
     */
    public getById(requestParameters: CardExpensesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CardExpensesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List expenses under the same account. Admin and bookkeeper have access to any expense, and regular users can only access their own.
     * @summary List expenses
     * @param {CardExpensesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardExpensesApiGenerated
     */
    public list(requestParameters: CardExpensesApiListRequest, options?: AxiosRequestConfig) {
        return CardExpensesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an expense. Admin and bookkeeper have access to any expense, and regular users can only access their own.
     * @summary Update an expense
     * @param {CardExpensesApiUpdateExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardExpensesApiGenerated
     */
    public updateExpense(requestParameters: CardExpensesApiUpdateExpenseRequest, options?: AxiosRequestConfig) {
        return CardExpensesApiFp(this.configuration).updateExpense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
